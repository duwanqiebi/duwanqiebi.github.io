---
layout:     post
category: [Thymeleaf, 框架学习]
title:      "Thymeleaf学习(二)"
subtitle:   "thymeleaf标准语法"
date:       2016-04-15 12:00:00
author:     "独顽且鄙"
header-img: "img/post-bg-2015.jpg"
catalog:    true
tags:
    - Thymeleaf
---


## Message

> Externalizing text is extracting fragments of template code out of template files so that they can be kept in specific separate files (typically .properties files) and that they can be easily substituted by equivalent texts written in other languages (a process called internationalization or simply i18n). Externalized fragments of text are usually called “messages”.

这是官方对于“信息”的定义，简要理解，就是具体的文本内容。通过property文件定义文本内容(国际化)，并在模版中通过key来应用。相应语法为： **#{...}** 

#### th:text

<pre class="prettyprint linenums html">
&lt;p th:text="#{home.welcome}"&gt;Welcome to our grocery store!&lt;/p&gt;
</pre>

上面是官方例子中home.html中的一行代码。模板引擎工作时，标准信息解析器(standard message resolver)会在home.html同目录下同名的property文件中寻找相应的key，例如：

- /WEB-INF/templates/home_en.properties :英语property文件
- /WEB-INF/templates/home_es.properties :西班牙语property文件
- /WEB-INF/templates/home_pt_BR.properties : 葡萄牙语property文件
- /WEB-INF/templates/home.properties :默认环境

thymeleaf会根据当前环境的语言设置(locale)来获得相应语言环境的资源文件，如果找不到，则使用默认的资源文件，即home.properties。

接着我们可以看看home_en.properties中对home.welocme的配置。
<pre class="prettyprint linenums html">
home.welcome = Welcome to our grocery store!
</pre>

#### th:utext

我们使用th:text已经可以显示一些基本的信息了，但是还有一些特殊的情况，例如我们想把信息中的一些字加粗:
<pre class="prettyprint linenums html">
&lt;p th:text="#{home.welcome}"&gt;Welcome to our grocery store，&lt;b&gt;duwanqiebi&lt;/b&gt;!&lt;/p&gt;
</pre>
如果使用th:text标签，模板的解析结果就会像下面这样：
<pre class="prettyprint linenums html">
&lt;p th:text="#{home.welcome}"&gt;
	Welcome to our grocery store，&amplt;b&ampgt;duwanqiebi&amplt;/b&ampgt;!
&lt;/p&gt;
</pre>

可以看到,&lt;b>标签被转义成&amp;lt;b&amp;gt;,但是这并不是我们想要看到的。所以，我们可以使用**th:utext** 来防止标签被转义。
<pre class="prettyprint linenums">
&lt;p th:utext="#{home.welcome}"&gt;
	Welcome to our grocery store，&lt;b&gt;duwanqiebi&lt;/b&gt;!
&lt;/p&gt;
</pre>

## 变量
thymeleaf模板中可以通过${...}表达式来引用上下文中的对象。
<pre class="prettyprint linenums">
&lt;span th:text="${today}"&gt;13 february 2011&lt;/span&gt;
</pre>

#### 基本对象(Expression Basic Objects)

我们可以使用thymeleaf封装好的一些对象来提高表达式的灵活性，这些对象通过#来引用。

> - **#ctx:** the context object.
> - **#vars:** the context variables.
> - **#locale:** the context locale.
> - **#httpServletRequest:** (only in Web Contexts) the HttpServletRequest object.
> - **#httpSession:** (only in Web Contexts) the HttpSession object.

例如：
<pre class="prettyprint linenums">
Established locale country: &lt;span th:text="${#locale.country}"&gt;US&lt;/span&gt;
</pre>

[Appendix A: Expression Basic Objects](http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#appendix-a-expression-basic-objects)中可以具体了解到这些对象。

#### 功能对象(Expression Utility Objects)

除了上面的那些基本对象，Thymeleaf还提供了一组功能性对象，这些功能性对象将会帮我们完成一些表达式中一些常用的功能。

> - **#dates:** utility methods for java.util.Date objects: formatting, component extraction, etc.
> - **#calendars:** analogous to #dates, but for java.util.Calendar objects.
> - **#numbers:** utility methods for formatting numeric objects.
> - **#strings:** utility methods for String objects: contains, startsWith, prepending/appending, etc.
> - **#objects:** utility methods for objects in general.
> - **#bools:** utility methods for boolean evaluation.
> - **#arrays:** utility methods for arrays.
> - **#lists:** utility methods for lists.
> - **#sets:** utility methods for sets.
> - **#maps:** utility methods for maps.
> - **#aggregates:** utility methods for creating aggregates on arrays or collections.
> - **#messages:** utility methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{…} syntax.
> - **#ids:** utility methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).

[Appendix B: Expression Utility Objects](http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#appendix-b-expression-utility-objects)对这些对象做了非常详细的解释。


## 选择表达式(Expressions on selections)

选择表达式通过使用***{...}** 语法来选取当前对象的属性,当前对象通过**th:object** 属性来指定。例如userprofile.html中：
<pre class="prettyprint linenums">
&lt;div th:object="${session.user}"&gt;
    &lt;p&gt;Name: &lt;span th:text="*{firstName}"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;
    &lt;p&gt;Surname: &lt;span th:text="*{lastName}"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;
    &lt;p&gt;Nationality: &lt;span th:text="*{nationality}"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
</pre>

当指定了**th:object** 时，**#object** 表达式也可以使用。同时**${}** 表达式可以与***{...}**表达式混合使用，例如:
<pre class="prettyprint linenums">
&lt;div th:object="${session.user}"&gt;
  &lt;p&gt;Name: &lt;span th:text="${#object.firstName}"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;
  &lt;p&gt;Surname: &lt;span th:text="${session.user.lastName}"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;
  &lt;p&gt;Nationality: &lt;span th:text="*{nationality}"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
</pre>

当没有指定**th:object** 时，**${}** 表达式与***{...}**表达式是通用的，两者可以互换。
<pre class="prettyprint linenums">
&lt;div&gt;
  &lt;p&gt;Name: &lt;span th:text="*{session.user.name}"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;
  &lt;p&gt;Surname: &lt;span th:text="*{session.user.surname}"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;
  &lt;p&gt;Nationality: &lt;span th:text="*{session.user.nationality}"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
</pre>

## URL链接(Link URLs)

url通过**@{...}** 语法在模板中声明，其中可以放入任何表达式，并且会进行自动url-encoding处理。例(home.html)：
<pre class="prettyprint linenums">
&lt;p&gt;Please select an option&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
	&lt;a href="product/list.html" th:href="@{/product/list}"&gt;Product List&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
	&lt;a href="order/list.html" th:href="@{/order/list}"&gt;Order List&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
	&lt;a href="subscribe.html" th:href="@{/subscribe}"&gt;Subscribe to our Newsletter&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
	&lt;a href="userprofile.html" th:href="@{/userprofile}"&gt;See User Profile&lt;/a&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</pre>

## 常量(Literals)

#### 文字与数字常量

这个就是把从配置文件中读取key的方法变成了常量值。例：
<pre class="prettyprint linenums">
&lt;p&gt;
  &lt;span th:text="'working web application'"&gt;template file&lt;/span&gt;.
  The year is &lt;span th:text="2013"&gt;1492&lt;/span&gt;.
  In two years, it will be &lt;span th:text="2013 + 2"&gt;1494&lt;/span&gt;.
&lt;/p&gt;
</pre>

#### 布尔值与null常量

布尔值常量就是**true** 和**false** ,null常量就是**null** ，使用方式例：

<pre class="prettyprint linenums">
&lt;div th:if="${user.isAdmin()} == false"&gt; ...
&lt;div th:if="${variable.something} == null"&gt; ...
</pre>

## 操作符


二元操作符：**+** ，**-** ，***** ，**/** ，**%** ，**>** ，**<** ，**==** ，**!=** ......
三元操作符: **A ? B : C** 

有几点需要注意的地方

- **+** 操作符可用于两个数字相加，也可用于字符串的相连
- **>** ，**<** ，**>=** ，**<=** 在模板中需要转义

## 设置标签属性值(Setting Attribute Values)

#### 设置属性值--通用方法

**th:attr** 可以设置任意属性的值，用法如下：
<pre class="prettyprint linenums">
&lt;form action="subscribe.html" th:attr="action=@{/subscribe}"&gt;
  &lt;fieldset&gt;
    &lt;input type="text" name="email" /&gt;
    &lt;input type="submit" value="Subscribe me!" th:attr="value=#{subscribe.submit}"/&gt;
  &lt;/fieldset&gt;
  &lt;!-- 一次设置多个属性值 --&gt;
  &lt;img src="../../images/gtvglogo.png" 
     th:attr="src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}" /&gt;
&lt;/form&gt;
</pre>

#### 设置属性值--指定方法

如果有一个特别常用的属性，每一次都要用**th:attr** 设置属性就会显得特别麻烦、臃肿。所以thymeleaf提供了一些属性来解决这个问题。
<pre class="prettyprint linenums">
&lt;form action="subscribe.html" th:action="@{/subscribe}"&gt;
</pre>

还有很多可以这样设置的属性：
![](http://i3.piimg.com/28300e22cf736149.png)

#### 同时设置多个属性值

thymeleaf有两个特殊的属性**th:alt-title** ，**th:lang-xmllang** 能够将两种属性设为同一个值。
<pre class="prettyprint linenums">
&lt;img src="../../images/gtvglogo.png" 
     th:src="@{/images/gtvglogo.png}" th:alt-title="#{logo}" /&gt;
</pre>

#### Appending and prepending

**th:attrappend** ,**th:attrprepend** 两个属性用来在原有属性的条件下添加。例:
<pre class="prettyprint linenums">
&lt;input type="button" value="Do it!" class="btn" th:attrappend="class=${' ' + cssStyle}" /&gt;
</pre>
假设我们把cssStyle变量的值设为"warning"，这样模板的解析结果会如下：
<pre class="prettyprint linenums">
&lt;input type="button" value="Do it!" class="btn warning" /&gt;
</pre>

thymeleaf同样将两个比较常用的属性单独提取出来：**th:classappend** ，**th:styleappend** ，例：
<pre class="prettyprint linenums">
&lt;tr th:each="prod : ${prods}" class="row" th:classappend="${prodStat.odd}? 'odd'"&gt;
</pre>

#### Fixed-value boolean attributes

XHTML/HTML5中有一些特殊的属性，它们要么以特定的固定值存在，要么不存在。例如**checked** ：
<pre class="prettyprint linenums">
&lt;input type="checkbox" name="option1" checked="checked" /&gt;
&lt;input type="checkbox" name="option2" /&gt;
</pre>

thymeleaf为这些特殊的属性设定了标签：
![](http://i4.piimg.com/5d04bc0e6b3d114c.png)

<pre class="prettyprint linenums">
&lt;input type="checkbox" name="active" th:checked="${user.active}" /&gt;
</pre>
